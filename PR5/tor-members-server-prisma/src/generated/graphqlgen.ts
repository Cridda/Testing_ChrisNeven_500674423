// Code generated by github.com/prisma/graphqlgen, DO NOT EDIT.

import { GraphQLResolveInfo } from "graphql";
import {
  User,
  Address,
  Accommodation,
  AccommodationType,
  City,
  TranslatableString,
  Site,
  AccommodationFeature,
  Bathroom,
  BathroomType,
  Bedroom,
  BedroomType,
  Photo
} from "./prisma-client";
import { AuthPayload } from "../types";
import { Context } from "../types";

export namespace QueryResolvers {
  export const defaultResolvers = {};

  export interface ArgsAccommodation {
    id: string;
  }

  export type MeResolver = (
    parent: undefined,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => User | null | Promise<User | null>;

  export type AccommodationResolver = (
    parent: undefined,
    args: ArgsAccommodation,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Accommodation | null | Promise<Accommodation | null>;

  export type SitesResolver = (
    parent: undefined,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Site[] | Promise<Site[]>;

  export type FeaturesResolver = (
    parent: undefined,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => AccommodationFeature[] | Promise<AccommodationFeature[]>;

  export type BedroomTypesResolver = (
    parent: undefined,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => BedroomType[] | Promise<BedroomType[]>;

  export type BathroomTypesResolver = (
    parent: undefined,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => BathroomType[] | Promise<BathroomType[]>;

  export type AccommodationsResolver = (
    parent: undefined,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Accommodation[] | Promise<Accommodation[]>;

  export type UsersResolver = (
    parent: undefined,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => User[] | Promise<User[]>;

  export interface Type {
    me: (
      parent: undefined,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => User | null | Promise<User | null>;

    accommodation: (
      parent: undefined,
      args: ArgsAccommodation,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Accommodation | null | Promise<Accommodation | null>;

    sites: (
      parent: undefined,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Site[] | Promise<Site[]>;

    features: (
      parent: undefined,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => AccommodationFeature[] | Promise<AccommodationFeature[]>;

    bedroomTypes: (
      parent: undefined,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => BedroomType[] | Promise<BedroomType[]>;

    bathroomTypes: (
      parent: undefined,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => BathroomType[] | Promise<BathroomType[]>;

    accommodations: (
      parent: undefined,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Accommodation[] | Promise<Accommodation[]>;

    users: (
      parent: undefined,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => User[] | Promise<User[]>;
  }
}

export namespace UserResolvers {
  export const defaultResolvers = {
    id: (parent: User) => parent.id,
    email: (parent: User) => parent.email,
    firstName: (parent: User) => parent.firstName,
    lastName: (parent: User) => parent.lastName,
    phone: (parent: User) => parent.phone
  };

  export type IdResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type EmailResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type FirstNameResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type LastNameResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type AddressResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Address | Promise<Address>;

  export type PhoneResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type AccommodationsResolver = (
    parent: User,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Accommodation[] | Promise<Accommodation[]>;

  export interface Type {
    id: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    email: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    firstName: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    lastName: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    address: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Address | Promise<Address>;

    phone: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    accommodations: (
      parent: User,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Accommodation[] | Promise<Accommodation[]>;
  }
}

export namespace AddressResolvers {
  export const defaultResolvers = {
    id: (parent: Address) => parent.id,
    address: (parent: Address) => parent.address,
    postcode: (parent: Address) => parent.postcode,
    city: (parent: Address) => parent.city
  };

  export type IdResolver = (
    parent: Address,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type AddressResolver = (
    parent: Address,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type PostcodeResolver = (
    parent: Address,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type CityResolver = (
    parent: Address,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export interface Type {
    id: (
      parent: Address,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    address: (
      parent: Address,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    postcode: (
      parent: Address,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    city: (
      parent: Address,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;
  }
}

export namespace AccommodationResolvers {
  export const defaultResolvers = {
    id: (parent: Accommodation) => parent.id,
    name: (parent: Accommodation) => parent.name,
    code: (parent: Accommodation) => parent.code,
    slug: (parent: Accommodation) => parent.slug,
    livingArea: (parent: Accommodation) => parent.livingArea,
    outsideArea: (parent: Accommodation) => parent.outsideArea,
    contactPerson: (parent: Accommodation) => parent.contactPerson,
    contactPhone: (parent: Accommodation) => parent.contactPhone,
    minCapacity: (parent: Accommodation) => parent.minCapacity,
    maxCapacity: (parent: Accommodation) => parent.maxCapacity
  };

  export type IdResolver = (
    parent: Accommodation,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type NameResolver = (
    parent: Accommodation,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type CodeResolver = (
    parent: Accommodation,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;

  export type TypeResolver = (
    parent: Accommodation,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => AccommodationType | Promise<AccommodationType>;

  export type CityResolver = (
    parent: Accommodation,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => City | Promise<City>;

  export type DescriptionResolver = (
    parent: Accommodation,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => TranslatableString | Promise<TranslatableString>;

  export type SlugResolver = (
    parent: Accommodation,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type LivingAreaResolver = (
    parent: Accommodation,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;

  export type OutsideAreaResolver = (
    parent: Accommodation,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;

  export type ContactPersonResolver = (
    parent: Accommodation,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type ContactPhoneResolver = (
    parent: Accommodation,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type KeyAddressResolver = (
    parent: Accommodation,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Address | Promise<Address>;

  export type AddressResolver = (
    parent: Accommodation,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Address | Promise<Address>;

  export type MinCapacityResolver = (
    parent: Accommodation,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;

  export type MaxCapacityResolver = (
    parent: Accommodation,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;

  export type SitesResolver = (
    parent: Accommodation,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Site[] | Promise<Site[]>;

  export type FeaturesResolver = (
    parent: Accommodation,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => AccommodationFeature[] | Promise<AccommodationFeature[]>;

  export type BathroomsResolver = (
    parent: Accommodation,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Bathroom[] | Promise<Bathroom[]>;

  export type BedroomsResolver = (
    parent: Accommodation,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Bedroom[] | Promise<Bedroom[]>;

  export type PhotosResolver = (
    parent: Accommodation,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Photo[] | Promise<Photo[]>;

  export interface Type {
    id: (
      parent: Accommodation,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    name: (
      parent: Accommodation,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    code: (
      parent: Accommodation,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | Promise<number>;

    type: (
      parent: Accommodation,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => AccommodationType | Promise<AccommodationType>;

    city: (
      parent: Accommodation,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => City | Promise<City>;

    description: (
      parent: Accommodation,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => TranslatableString | Promise<TranslatableString>;

    slug: (
      parent: Accommodation,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    livingArea: (
      parent: Accommodation,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | Promise<number>;

    outsideArea: (
      parent: Accommodation,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | Promise<number>;

    contactPerson: (
      parent: Accommodation,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    contactPhone: (
      parent: Accommodation,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    keyAddress: (
      parent: Accommodation,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Address | Promise<Address>;

    address: (
      parent: Accommodation,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Address | Promise<Address>;

    minCapacity: (
      parent: Accommodation,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | Promise<number>;

    maxCapacity: (
      parent: Accommodation,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | Promise<number>;

    sites: (
      parent: Accommodation,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Site[] | Promise<Site[]>;

    features: (
      parent: Accommodation,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => AccommodationFeature[] | Promise<AccommodationFeature[]>;

    bathrooms: (
      parent: Accommodation,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Bathroom[] | Promise<Bathroom[]>;

    bedrooms: (
      parent: Accommodation,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Bedroom[] | Promise<Bedroom[]>;

    photos: (
      parent: Accommodation,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Photo[] | Promise<Photo[]>;
  }
}

export namespace AccommodationTypeResolvers {
  export const defaultResolvers = {
    id: (parent: AccommodationType) => parent.id,
    name: (parent: AccommodationType) =>
      parent.name === undefined ? null : parent.name
  };

  export type IdResolver = (
    parent: AccommodationType,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type NameResolver = (
    parent: AccommodationType,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export interface Type {
    id: (
      parent: AccommodationType,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    name: (
      parent: AccommodationType,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;
  }
}

export namespace CityResolvers {
  export const defaultResolvers = {
    id: (parent: City) => parent.id,
    name: (parent: City) => (parent.name === undefined ? null : parent.name)
  };

  export type IdResolver = (
    parent: City,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type NameResolver = (
    parent: City,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export interface Type {
    id: (
      parent: City,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    name: (
      parent: City,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;
  }
}

export namespace TranslatableStringResolvers {
  export const defaultResolvers = {
    id: (parent: TranslatableString) => parent.id,
    en: (parent: TranslatableString) =>
      parent.en === undefined ? null : parent.en,
    nl: (parent: TranslatableString) =>
      parent.nl === undefined ? null : parent.nl,
    de: (parent: TranslatableString) =>
      parent.de === undefined ? null : parent.de
  };

  export type IdResolver = (
    parent: TranslatableString,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type EnResolver = (
    parent: TranslatableString,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type NlResolver = (
    parent: TranslatableString,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export type DeResolver = (
    parent: TranslatableString,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export interface Type {
    id: (
      parent: TranslatableString,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    en: (
      parent: TranslatableString,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    nl: (
      parent: TranslatableString,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;

    de: (
      parent: TranslatableString,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;
  }
}

export namespace SiteResolvers {
  export const defaultResolvers = {
    id: (parent: Site) => parent.id,
    name: (parent: Site) => parent.name
  };

  export type IdResolver = (
    parent: Site,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type NameResolver = (
    parent: Site,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export interface Type {
    id: (
      parent: Site,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    name: (
      parent: Site,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;
  }
}

export namespace AccommodationFeatureResolvers {
  export const defaultResolvers = {
    id: (parent: AccommodationFeature) => parent.id,
    name: (parent: AccommodationFeature) =>
      parent.name === undefined ? null : parent.name
  };

  export type IdResolver = (
    parent: AccommodationFeature,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type NameResolver = (
    parent: AccommodationFeature,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | null | Promise<string | null>;

  export interface Type {
    id: (
      parent: AccommodationFeature,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    name: (
      parent: AccommodationFeature,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | null | Promise<string | null>;
  }
}

export namespace BathroomResolvers {
  export const defaultResolvers = {
    id: (parent: Bathroom) => parent.id,
    toilet: (parent: Bathroom) => parent.toilet,
    bath: (parent: Bathroom) => parent.bath,
    shower: (parent: Bathroom) => parent.shower
  };

  export type IdResolver = (
    parent: Bathroom,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type TypeResolver = (
    parent: Bathroom,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => BathroomType | Promise<BathroomType>;

  export type NameResolver = (
    parent: Bathroom,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => TranslatableString | Promise<TranslatableString>;

  export type ToiletResolver = (
    parent: Bathroom,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;

  export type BathResolver = (
    parent: Bathroom,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;

  export type ShowerResolver = (
    parent: Bathroom,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;

  export interface Type {
    id: (
      parent: Bathroom,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    type: (
      parent: Bathroom,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => BathroomType | Promise<BathroomType>;

    name: (
      parent: Bathroom,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => TranslatableString | Promise<TranslatableString>;

    toilet: (
      parent: Bathroom,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | Promise<number>;

    bath: (
      parent: Bathroom,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | Promise<number>;

    shower: (
      parent: Bathroom,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | Promise<number>;
  }
}

export namespace BathroomTypeResolvers {
  export const defaultResolvers = {
    id: (parent: BathroomType) => parent.id
  };

  export type IdResolver = (
    parent: BathroomType,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type NameResolver = (
    parent: BathroomType,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export interface Type {
    id: (
      parent: BathroomType,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    name: (
      parent: BathroomType,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;
  }
}

export namespace BedroomResolvers {
  export const defaultResolvers = {
    id: (parent: Bedroom) => parent.id,
    singleBed: (parent: Bedroom) => parent.singleBed,
    doubleBed: (parent: Bedroom) => parent.doubleBed
  };

  export type IdResolver = (
    parent: Bedroom,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type NameResolver = (
    parent: Bedroom,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => TranslatableString | Promise<TranslatableString>;

  export type TypeResolver = (
    parent: Bedroom,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => BedroomType | Promise<BedroomType>;

  export type SingleBedResolver = (
    parent: Bedroom,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;

  export type DoubleBedResolver = (
    parent: Bedroom,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => number | Promise<number>;

  export interface Type {
    id: (
      parent: Bedroom,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    name: (
      parent: Bedroom,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => TranslatableString | Promise<TranslatableString>;

    type: (
      parent: Bedroom,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => BedroomType | Promise<BedroomType>;

    singleBed: (
      parent: Bedroom,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | Promise<number>;

    doubleBed: (
      parent: Bedroom,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => number | Promise<number>;
  }
}

export namespace BedroomTypeResolvers {
  export const defaultResolvers = {
    id: (parent: BedroomType) => parent.id
  };

  export type IdResolver = (
    parent: BedroomType,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type NameResolver = (
    parent: BedroomType,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export interface Type {
    id: (
      parent: BedroomType,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    name: (
      parent: BedroomType,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;
  }
}

export namespace PhotoResolvers {
  export const defaultResolvers = {
    id: (parent: Photo) => parent.id,
    url: (parent: Photo) => parent.url
  };

  export type IdResolver = (
    parent: Photo,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type UrlResolver = (
    parent: Photo,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type NameResolver = (
    parent: Photo,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => TranslatableString | Promise<TranslatableString>;

  export interface Type {
    id: (
      parent: Photo,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    url: (
      parent: Photo,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    name: (
      parent: Photo,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => TranslatableString | Promise<TranslatableString>;
  }
}

export namespace MutationResolvers {
  export const defaultResolvers = {};

  export interface AddressInput {
    address: string | null;
    postcode: string | null;
    city: string | null;
  }
  export interface AccommodationTypeInput {
    name: string | null;
  }
  export interface CityInput {
    name: string | null;
  }
  export interface TranslatableStringInput {
    en: string | null;
    nl: string | null;
    de: string | null;
  }
  export interface PhotosInput {
    photos: PhotoInput[];
  }
  export interface PhotoInput {
    url: string | null;
    name: TranslatableStringInput | null;
  }
  export interface AccommodationInput {
    name: string | null;
    type: AccommodationTypeInput | null;
    city: CityInput | null;
    description: TranslatableStringInput | null;
    slug: string | null;
    livingArea: number | null;
    outsideArea: number | null;
    contactPerson: string | null;
    contactPhone: string | null;
    keyAddress: AddressInput | null;
    address: AddressInput | null;
    minCapacity: number | null;
    maxCapacity: number | null;
    photos: PhotosInput | null;
    sites: SiteInput[];
    features: AccommodationFeatureInput[] | null;
    bathrooms: BathroomInput[] | null;
    bedrooms: BedroomInput[] | null;
  }
  export interface SiteInput {
    id: string | null;
  }
  export interface AccommodationFeatureInput {
    id: string | null;
  }
  export interface BathroomInput {
    name: TranslatableStringInput;
    type: BathroomTypeInput;
    toilet: number;
    bath: number;
    shower: number;
  }
  export interface BathroomTypeInput {
    id: string;
  }
  export interface BedroomInput {
    name: TranslatableStringInput;
    type: BedroomTypeInput;
    singleBed: number;
    doubleBed: number;
  }
  export interface BedroomTypeInput {
    id: string;
  }

  export interface ArgsSignup {
    email: string;
    password: string;
    firstName: string | null;
    lastName: string | null;
    address: AddressInput | null;
    phone: string | null;
  }

  export interface ArgsLogin {
    email: string;
    password: string;
  }

  export interface ArgsCreateAccommodation {
    name: string;
    code: number | null;
    type: AccommodationTypeInput;
    city: CityInput;
    description: TranslatableStringInput;
    slug: string;
    livingArea: number;
    outsideArea: number;
    contactPerson: string;
    contactPhone: string;
    keyAddress: AddressInput;
    address: AddressInput;
    minCapacity: number;
    maxCapacity: number;
    photos: PhotosInput | null;
  }

  export interface ArgsUpdateAccommodation {
    accommodationId: string;
    input: AccommodationInput;
  }

  export interface ArgsCreateBedroom {
    accommodationId: string;
    bedroom: BedroomInput;
  }

  export interface ArgsCreateBathroom {
    accommodationId: string;
    bathroom: BathroomInput;
  }

  export type SignupResolver = (
    parent: undefined,
    args: ArgsSignup,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => AuthPayload | Promise<AuthPayload>;

  export type LoginResolver = (
    parent: undefined,
    args: ArgsLogin,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => AuthPayload | Promise<AuthPayload>;

  export type CreateAccommodationResolver = (
    parent: undefined,
    args: ArgsCreateAccommodation,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Accommodation | Promise<Accommodation>;

  export type UpdateAccommodationResolver = (
    parent: undefined,
    args: ArgsUpdateAccommodation,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Accommodation | Promise<Accommodation>;

  export type CreateBedroomResolver = (
    parent: undefined,
    args: ArgsCreateBedroom,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Bedroom[] | Promise<Bedroom[]>;

  export type CreateBathroomResolver = (
    parent: undefined,
    args: ArgsCreateBathroom,
    ctx: Context,
    info: GraphQLResolveInfo
  ) => Bathroom[] | Promise<Bathroom[]>;

  export interface Type {
    signup: (
      parent: undefined,
      args: ArgsSignup,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => AuthPayload | Promise<AuthPayload>;

    login: (
      parent: undefined,
      args: ArgsLogin,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => AuthPayload | Promise<AuthPayload>;

    createAccommodation: (
      parent: undefined,
      args: ArgsCreateAccommodation,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Accommodation | Promise<Accommodation>;

    updateAccommodation: (
      parent: undefined,
      args: ArgsUpdateAccommodation,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Accommodation | Promise<Accommodation>;

    createBedroom: (
      parent: undefined,
      args: ArgsCreateBedroom,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Bedroom[] | Promise<Bedroom[]>;

    createBathroom: (
      parent: undefined,
      args: ArgsCreateBathroom,
      ctx: Context,
      info: GraphQLResolveInfo
    ) => Bathroom[] | Promise<Bathroom[]>;
  }
}

export namespace AuthPayloadResolvers {
  export const defaultResolvers = {
    token: (parent: AuthPayload) => parent.token,
    user: (parent: AuthPayload) => parent.user
  };

  export type TokenResolver = (
    parent: AuthPayload,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => string | Promise<string>;

  export type UserResolver = (
    parent: AuthPayload,
    args: {},
    ctx: Context,
    info: GraphQLResolveInfo
  ) => User | Promise<User>;

  export interface Type {
    token: (
      parent: AuthPayload,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => string | Promise<string>;

    user: (
      parent: AuthPayload,
      args: {},
      ctx: Context,
      info: GraphQLResolveInfo
    ) => User | Promise<User>;
  }
}

export interface Resolvers {
  Query: QueryResolvers.Type;
  User: UserResolvers.Type;
  Address: AddressResolvers.Type;
  Accommodation: AccommodationResolvers.Type;
  AccommodationType: AccommodationTypeResolvers.Type;
  City: CityResolvers.Type;
  TranslatableString: TranslatableStringResolvers.Type;
  Site: SiteResolvers.Type;
  AccommodationFeature: AccommodationFeatureResolvers.Type;
  Bathroom: BathroomResolvers.Type;
  BathroomType: BathroomTypeResolvers.Type;
  Bedroom: BedroomResolvers.Type;
  BedroomType: BedroomTypeResolvers.Type;
  Photo: PhotoResolvers.Type;
  Mutation: MutationResolvers.Type;
  AuthPayload: AuthPayloadResolvers.Type;
}
