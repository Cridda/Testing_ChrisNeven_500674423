{"version":3,"file":"main.2563cb49467673f12905.hot-update.js","sources":["webpack:///./src/components/organisms/info/InfoFacilities.tsx"],"sourcesContent":["import React, { Fragment, Component } from 'react';\nimport {\n    SelectedAccommodationQuery_accommodation,\n    SitesQuery,\n    FeaturesQuery,\n    SelectedAccommodationQuery_accommodation_bedrooms,\n    CreateBedroom,\n    CreateBedroomVariables,\n    BedroomTypesQuery,\n    BedroomInput\n} from '../../../entities/schemaTypes';\nimport ContentHeader from '../../molecules/ContentHeader';\nimport { Divider } from '../../atoms/Divider';\nimport ContentBlock from '../../atoms/ContentBlock';\nimport SecondaryButton from '../../atoms/SecondaryButton';\nimport styled from 'styled-components';\nimport Checkbox from '../../atoms/Checkbox';\nimport gql from 'graphql-tag';\nimport { Query, Mutation } from 'react-apollo';\nimport Modal from 'react-responsive-modal';\nimport { Field, Formik, Form } from 'formik';\nimport InputWithToggle from '../../molecules/InputWithToggle';\nimport { LanguagesInputBlock } from '../../molecules/LanguagesInputBlock';\nimport { PrimaryButton } from '../../atoms/PrimaryButton';\nimport { DoubleBedSVG } from '../../atoms/DoubleBedSVG';\nimport { SingleBedSVG } from '../../atoms/SingleBedSVG';\nimport { device } from '../../../constants/theme';\nimport ModalProvider from '../../reusable/MakeModal';\nimport { Toggle } from 'react-powerplug';\nimport { BedroomInputTypes, BathroomInputTypes } from '../../molecules/bathroom/BathroomContainer';\nimport BathroomModal from '../../molecules/bathroom/BathroomModal';\n\ninterface Props {\n    accommodation: SelectedAccommodationQuery_accommodation;\n}\nfunction foo(a: number) {\n    // Noncompliant\n    if (a === 1) {\n        return 42;\n    }\n    return 42;\n}\nexport const bedroomFragment = gql`\n    fragment BedroomFragment on Bedroom {\n        id\n        singleBed\n        doubleBed\n        type {\n            name\n        }\n        name {\n            nl\n            en\n            de\n        }\n    }\n`;\n\nexport const bathroomFragment = gql`\n    fragment BathroomFragment on Bathroom {\n        id\n        toilet\n        bath\n        shower\n        type {\n            name\n        }\n        name {\n            nl\n            en\n            de\n        }\n    }\n`;\n\nexport const facilitiesFragment = gql`\n    fragment FacilitiesFragment on Accommodation {\n        bathrooms {\n            ...BathroomFragment\n        }\n        bedrooms {\n            ...BedroomFragment\n        }\n        sites {\n            name\n        }\n        features {\n            name\n        }\n    }\n    ${bedroomFragment}\n    ${bathroomFragment}\n`;\n\nconst SITES_QUERY = gql`\n    query SitesQuery {\n        sites {\n            id\n            name\n        }\n    }\n`;\n\nconst FEATURES_QUERY = gql`\n    query FeaturesQuery {\n        features {\n            id\n            name\n        }\n    }\n`;\n\nconst BEDROOMTYPES_QUERY = gql`\n    query BedroomTypesQuery {\n        bedroomTypes {\n            id\n            name\n        }\n    }\n`;\n\nconst CREATE_BEDROOM = gql`\n    mutation CreateBedroom($accommodationId: ID!, $bedroom: BedroomInput!) {\n        createBedroom(accommodationId: $accommodationId, bedroom: $bedroom) {\n            ...BedroomFragment\n        }\n    }\n    ${bedroomFragment}\n`;\n\nconst CREATE_BATHROOM = gql`\n    mutation CreateBathroom($accommodationId: ID!, $bathroom: BathroomInput!) {\n        createBathroom(accommodationId: $accommodationId, bathroom: $bathroom) {\n            ...BathroomFragment\n        }\n    }\n    ${bathroomFragment}\n`;\n// const bedroomSchema = Yup.object().shape({\n//     name: Yup.object({ nl: Yup.string().required('Is verplicht goos') }),\n//     singleBed: Yup.number().required('Is verplicht'),\n//     doubleBed: Yup.number().required('Is verplicht')\n// });\n\nconst OptionsBlock = styled.div`\n    display: grid;\n    @media ${device.xs} {\n        grid-template-columns: 0.5fr 0.5fr;\n    }\n    @media ${device.s} {\n        grid-template-columns: 0.333fr 0.333fr 0.333fr;\n    }\n    @media ${device.l} {\n        grid-template-columns: 0.25fr 0.25fr 0.25fr 0.25fr;\n    }\n`;\n\nconst Bedroom = styled.div`\n    padding: 2rem;\n    background: ${({ theme }) => theme.colors.light.flash};\n    display: flex;\n    flex-direction: column;\n    height: 15rem;\n    cursor: pointer;\n    p {\n        margin: 0;\n    }\n    h4 {\n        padding-top: 0.5rem;\n        line-height: 1.2em;\n    }\n`;\n\nconst BedroomContainer = styled.div`\n    padding: 0rem 1.5rem;\n    display: grid;\n    grid-template-columns: 1fr;\n    @media ${device.xs} {\n        grid-template-columns: 0.333fr 0.333fr;\n    }\n    @media ${device.s} {\n        grid-template-columns: 0.333fr 0.333fr 0.333fr;\n    }\n    @media ${device.l} {\n        grid-template-columns: 0.25fr 0.25fr 0.25fr 0.25fr;\n    }\n    @media ${device.xl} {\n        grid-template-columns: 0.2fr 0.2fr 0.2fr 0.2fr 0.2fr;\n    }\n    grid-column-gap: 1rem;\n    grid-row-gap: 1rem;\n`;\n\nconst Beds = styled.div`\n    width: 100%;\n    display: flex;\n    flex-direction: row;\n    flex-wrap: wrap;\n`;\n\ninterface State {\n    open: boolean;\n    bedrooms: SelectedAccommodationQuery_accommodation_bedrooms[];\n}\nexport class InfoFacilities extends Component<Props, State> {\n    state = {\n        open: false,\n        bedrooms: [] as SelectedAccommodationQuery_accommodation_bedrooms[]\n    };\n    onOpenModal = () => {\n        this.setState({ open: true });\n    };\n\n    onCloseModal = () => {\n        this.setState({ open: false });\n    };\n\n    addToBedrooms = (bedroom: SelectedAccommodationQuery_accommodation_bedrooms) => {\n        const { bedrooms } = this.state;\n        bedrooms.push(bedroom);\n        this.setState({ bedrooms });\n    };\n\n    componentDidMount = () => {\n        const { accommodation } = this.props;\n        if (accommodation.bedrooms) {\n            this.setState({ bedrooms: accommodation.bedrooms });\n        }\n    };\n\n    render() {\n        const { accommodation } = this.props;\n        const { open, bedrooms } = this.state;\n        return (\n            <Fragment>\n                <Modal open={open} onClose={this.onCloseModal} center>\n                    <div style={{ padding: '2rem 5rem 3rem 5rem' }}>\n                        <h1>Slaapkamer toevoegen</h1>\n                        <Divider />\n                        <p>\n                            Lorem ipsum dolor sit amet consectetur adipisicing elit. Est dolores incidunt ipsa, earum\n                            nobis beatae facilis, dolore harum vitae nihil molestias repudiandae non quisquam ab. Omnis\n                            unde atque voluptate ipsa!\n                        </p>\n                        <Mutation<CreateBedroom, CreateBedroomVariables> mutation={CREATE_BEDROOM}>\n                            {createBedroom => (\n                                <Formik<BedroomInput>\n                                    initialValues={{\n                                        name: { en: '', nl: '', de: '' },\n                                        singleBed: 0,\n                                        doubleBed: 0,\n                                        type: { id: '' }\n                                    }}\n                                    onSubmit={async bedroom => {\n                                        // Why tf do I need to do this ugly af workaround\n                                        bedroom.doubleBed = Number(bedroom.doubleBed);\n                                        bedroom.singleBed = Number(bedroom.singleBed);\n                                        // bedrooms.push({ id: 'test', name: variables.name });\n                                        // this.setState({ bedrooms });\n                                        const response = await createBedroom({\n                                            variables: { accommodationId: accommodation.id, bedroom }\n                                        });\n                                        if (response && response.data && response.data.createBedroom) {\n                                            this.setState({ bedrooms: response.data.createBedroom });\n                                        }\n                                    }}\n                                >\n                                    {({ submitForm, resetForm, errors }) => (\n                                        <Form>\n                                            <h2>Faciliteiten </h2>\n                                            <ContentBlock>\n                                                <h4>Type slaapkamer</h4>\n\n                                                <Query<BedroomTypesQuery> query={BEDROOMTYPES_QUERY}>\n                                                    {({ data, error, loading }) => {\n                                                        if (loading || error || !data) {\n                                                            return null;\n                                                        }\n                                                        const options: string[] = [];\n                                                        const optionValues: string[] = [];\n                                                        data.bedroomTypes.map(bedroom => {\n                                                            options.push(bedroom.name);\n                                                            optionValues.push(bedroom.id);\n                                                        });\n                                                        return (\n                                                            <Field\n                                                                name=\"type.id\"\n                                                                options={options}\n                                                                optionValues={optionValues}\n                                                                component={InputWithToggle}\n                                                            />\n                                                        );\n                                                    }}\n                                                </Query>\n                                            </ContentBlock>\n                                            <ContentBlock>\n                                                <h4>Naam</h4>\n                                                <LanguagesInputBlock errors={errors} name=\"name\" />\n                                            </ContentBlock>\n\n                                            <ContentBlock>\n                                                <h4>Eenpersoonsbed</h4>\n                                                <Field\n                                                    type=\"number\"\n                                                    name=\"singleBed\"\n                                                    options={[0, 1, 2, 3, 4, 5]}\n                                                    component={InputWithToggle}\n                                                />\n                                                <h4>Tweepersoonsbed</h4>\n                                                <Field\n                                                    type=\"number\"\n                                                    name=\"doubleBed\"\n                                                    options={[0, 1, 2, 3, 4, 5]}\n                                                    component={InputWithToggle}\n                                                />\n                                            </ContentBlock>\n                                            <Divider />\n\n                                            <PrimaryButton\n                                                onClick={async () => {\n                                                    await submitForm();\n                                                    resetForm();\n                                                    this.onCloseModal();\n                                                }}\n                                            >\n                                                Slaapkamer toevoegen\n                                            </PrimaryButton>\n                                        </Form>\n                                    )}\n                                </Formik>\n                            )}\n                        </Mutation>\n                    </div>\n                </Modal>\n                <ContentHeader>\n                    <h1>Faciliteiten van het {accommodation.type.name}</h1>\n                    Lorem ipsum dolor sit amet consectetur adipisicing elit. Tempore quia reprehenderit minima nisi\n                    voluptates.\n                </ContentHeader>\n                <Divider />\n                <ContentBlock threeColumns>\n                    <h2>Slaapkamers</h2>\n                    <p>\n                        Lorem ipsum dolor sit amet consectetur adipisicing elit. Quisquam praesentium enim modi fugiat\n                        voluptatem, atque quod eveniet mollitia quas deleniti.\n                    </p>\n                    <SecondaryButton onClick={() => this.onOpenModal()} type=\"button\">\n                        Slaapkamer toevoegen\n                    </SecondaryButton>\n                </ContentBlock>\n                <BedroomContainer>\n                    {bedrooms &&\n                        bedrooms.map((bedroom, index) => {\n                            const { doubleBed, singleBed } = bedroom;\n                            return (\n                                <Bedroom onClick={() => this.onOpenModal()} key={'bedroom'.concat(String(index))}>\n                                    <Beds>\n                                        {[...Array(bedroom.doubleBed)].map((_, i) => (\n                                            <DoubleBedSVG key={'double'.concat(String(i))} />\n                                        ))}\n                                        {[...Array(bedroom.singleBed)].map((_, i) => (\n                                            <SingleBedSVG key={'single'.concat(String(i))} />\n                                        ))}\n                                    </Beds>\n                                    <h4>{bedroom.type.name}</h4>\n                                    {doubleBed > 0 && <p>{`${doubleBed} tweepersoonsbed`}</p>}\n                                    {singleBed > 0 && <p>{`${singleBed} eenpersoonsbed`}</p>}\n                                </Bedroom>\n                            );\n                        })}\n                </BedroomContainer>\n                <Divider />\n                <ContentBlock threeColumns>\n                    <h2>Badkamers</h2>\n                    <p>\n                        Lorem ipsum dolor sit amet consectetur adipisicing elit. Quisquam praesentium enim modi fugiat\n                        voluptatem, atque quod eveniet mollitia quas deleniti.\n                    </p>\n                    <BathroomModal edit />\n                </ContentBlock>\n\n                <Divider />\n                <ContentBlock>\n                    <h2>Ligging</h2>\n                    <p>\n                        Lorem ipsum dolor sit amet consectetur adipisicing elit. Voluptatem quia maiores, deleniti\n                        quaerat, fuga quos earum impedit id dolorum tempora quo architecto iure asperiores officiis\n                        quisquam nobis atque. Voluptatem, provident.\n                    </p>\n                </ContentBlock>\n                {/* LIGGING area */}\n                <OptionsBlock>\n                    <Query<SitesQuery> query={SITES_QUERY}>\n                        {({ loading, data, error }) => {\n                            if (loading || !data) {\n                                return 'Loading...';\n                            }\n                            if (error) {\n                                return null;\n                            }\n                            const { sites } = data;\n                            const accommodationSites = accommodation.sites;\n                            return (\n                                <Fragment>\n                                    {sites.map(({ id: id, name }) => {\n                                        let checked: boolean = false;\n                                        if (accommodationSites) {\n                                            checked = !!accommodationSites.find(accSite => accSite.name === name);\n                                        }\n                                        return (\n                                            <Checkbox key={id} checked={checked} onChange={() => ''}>\n                                                {name}\n                                            </Checkbox>\n                                        );\n                                    })}\n                                </Fragment>\n                            );\n                        }}\n                    </Query>\n                </OptionsBlock>\n                <Divider />\n                <ContentBlock>\n                    <h2>Accommodatie kenmerken</h2>\n                    <p>\n                        Lorem ipsum dolor sit amet consectetur adipisicing elit. Voluptatem quia maiores, deleniti\n                        quaerat, fuga quos earum impedit id dolorum tempora quo architecto iure asperiores officiis\n                        quisquam nobis atque. Voluptatem, provident.\n                    </p>\n                </ContentBlock>\n                <OptionsBlock>\n                    <Query<FeaturesQuery> query={FEATURES_QUERY}>\n                        {({ loading, error, data }) => {\n                            if (loading || !data) {\n                                return 'Loading...';\n                            }\n                            if (error) {\n                                return null;\n                            }\n                            const { features } = data;\n                            const accommodationFeatures = accommodation.features;\n                            return (\n                                <Fragment>\n                                    {features.map(({ id: id, name }) => {\n                                        let checked: boolean = false;\n                                        if (accommodationFeatures) {\n                                            checked = !!accommodationFeatures.find(\n                                                accFeature => accFeature.name === name\n                                            );\n                                        }\n                                        return (\n                                            <Checkbox key={id} checked={checked} onChange={() => ''}>\n                                                {name}\n                                            </Checkbox>\n                                        );\n                                    })}\n                                </Fragment>\n                            );\n                        }}\n                    </Query>\n                </OptionsBlock>\n            </Fragment>\n        );\n    }\n}\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAIA;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAgBA;AAiBA;AAmBA;AASA;AASA;AASA;AASA;AAQA;AACA;AACA;AACA;AACA;AAEA;AAAA;;AAAA;AAaA;AAAA;;AAAA;AAEA;AAAA;AAAA;AAcA;AAAA;;AAAA;AAoBA;AAAA;;AAAA;AAWA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAFA;AAIA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AA2OA;AAAA;AAzOA;AAAA;AACA;AACA;AAAA;AAAA;AACA;AAYA;AAGA;AACA;AACA;AACA;AAJA;;;;;;AAOA;AACA;AACA;AAGA;AACA;AADA;;AAAA;AAGA;AACA;AACA;;;;;AACA;AAEA;AAAA;AAAA;AAAA;AAOA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAQA;;;;;AA4BA;;AAAA;AACA;AACA;;;;;AACA;AA9EA;AAqFA;AAgBA;AAAA;AAOA;AAAA;AACA;AACA;AAAA;AAEA;AAEA;AACA;AAEA;AAOA;AAwBA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAIA;AAGA;AAcA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAAA;AAEA;AACA;AACA;AAAA;AAIA;AAGA;AAKA;AACA;AAnQA;;;;;;A","sourceRoot":""}