{"version":3,"file":"main.de3619a15800530acdc5.hot-update.js","sources":["webpack:///./src/components/templates/Login.tsx"],"sourcesContent":["import React, { FunctionComponent } from 'react';\nimport { PrimaryButton } from '../atoms/PrimaryButton';\nimport styled from 'styled-components';\nimport gql from 'graphql-tag';\nimport { Mutation } from 'react-apollo';\nimport { RouteComponentProps } from 'react-router';\nimport { LoginMutation, LoginMutationVariables } from '../../entities/schemaTypes';\nimport { AnchorTag } from '../atoms/AnchorTag';\nimport { Divider } from '../atoms/Divider';\nimport Logo from '../atoms/Logo';\nimport { setToken, readToken } from '../../utils';\nimport { Formik, Field, Form } from 'formik';\nimport * as Yup from 'yup';\nimport { TextInput } from '../atoms/TextInput';\n\nconst LOGIN_MUTATION = gql`\n    mutation LoginMutation($email: String!, $password: String!) {\n        login(email: $email, password: $password) {\n            token\n        }\n    }\n`;\n\ninterface Values {\n    email: string;\n    password: string;\n}\n\nconst LoginSchema = Yup.object().shape({\n    email: Yup.string()\n        .email('Vul een geldig email adres in')\n        .required('Email adres is verplicht'),\n    password: Yup.string().required('Wachtwoord is verplicht')\n});\n\nexport const Login: FunctionComponent<RouteComponentProps> = ({ history }) => {\n    if (readToken()) {\n        history.push('/accommodation/dashboard');\n    }\n    // Read token from localStorage in order to check if the user is logged in.\n\n    return (\n        <Mutation<LoginMutation, LoginMutationVariables> mutation={LOGIN_MUTATION}>\n            {(mutate, { error, data }) => {\n                return (\n                    <Container>\n                        <FormWrapper>\n                            <div>\n                                <Logo variant=\"dark\" />\n\n                                <Divider />\n                                <Formik<Values>\n                                    initialValues={{ email: '', password: '' }}\n                                    validationSchema={LoginSchema}\n                                    onSubmit={async (values: Values) => {\n                                        try {\n                                            const response = await mutate({\n                                                variables: values\n                                            });\n                                            console.log(values.password);\n                                            if (response && response.data) {\n                                                setToken(response.data.login.token);\n                                                history.push('/accommodation/dashboard');\n                                            }\n                                        } catch (e) {\n                                            alert('Verkeerde gebruikersnaam en/of wachtwoord');\n                                        }\n                                    }}\n                                >\n                                    {({ handleSubmit }) => (\n                                        <Form>\n                                            <Field\n                                                name=\"email\"\n                                                type=\"text\"\n                                                component={TextInput}\n                                                placeholder={'Email'}\n                                            />\n                                            <Field\n                                                name=\"password\"\n                                                type=\"password\"\n                                                component={TextInput}\n                                                placeholder={'Wachtwoord'}\n                                            />\n                                            <PrimaryButton onClick={handleSubmit} type=\"button\">\n                                                Inloggen\n                                            </PrimaryButton>\n                                        </Form>\n                                    )}\n                                </Formik>\n\n                                <Divider />\n                                <LoginMenu>\n                                    <AnchorTag to={'/register'}>account aanmaken</AnchorTag>\n                                    <AnchorTag to={'/login'}>wachtwoord vergeten</AnchorTag>\n                                </LoginMenu>\n                            </div>\n                        </FormWrapper>\n                    </Container>\n                );\n            }}\n        </Mutation>\n    );\n};\nconst password = 'asdasd';\n// @ts-ignore\neval(LoginSchema);\nconst Container = styled.div`\n    display: flex;\n    justify-content: center;\n    align-items: center;\n    height: 100vh;\n`;\n\nconst LoginMenu = styled.div`\n    display: flex;\n    justify-content: space-between;\n    width: 100%;\n`;\n\nconst FormWrapper = styled.div`\n    width: 50rem;\n    input {\n        padding: 1rem;\n        margin-bottom: 1rem;\n    }\n`;\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAaA;AACA;AAGA;AAJA;AAOA;AAAA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAAA;AACA;;;;;;;AAYA;AACA;AADA;;AAAA;AAGA;AACA;AACA;AACA;AACA;;;;AAEA;;;;;;;AAEA;AAEA;AAAA;AAkBA;AAYA;AAGA;AACA;AACA;AACA;AACA;AAAA;;AAAA;AAOA;AAAA;;AAAA;AAMA;AAAA;;AAAA;;;;;A","sourceRoot":""}